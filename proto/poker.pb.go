// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poker.proto

// 定义包名

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义 Req 消息结构
type PokerReq struct {
	Uid                  int32    `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PokerReq) Reset()         { *m = PokerReq{} }
func (m *PokerReq) String() string { return proto.CompactTextString(m) }
func (*PokerReq) ProtoMessage()    {}
func (*PokerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_507d94a3e2f11051, []int{0}
}

func (m *PokerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PokerReq.Unmarshal(m, b)
}
func (m *PokerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PokerReq.Marshal(b, m, deterministic)
}
func (m *PokerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerReq.Merge(m, src)
}
func (m *PokerReq) XXX_Size() int {
	return xxx_messageInfo_PokerReq.Size(m)
}
func (m *PokerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerReq.DiscardUnknown(m)
}

var xxx_messageInfo_PokerReq proto.InternalMessageInfo

func (m *PokerReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PokerReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PokerRes struct {
	Result               string   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Uid                  int32    `protobuf:"varint,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Table                int32    `protobuf:"varint,4,opt,name=table,proto3" json:"table,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PokerRes) Reset()         { *m = PokerRes{} }
func (m *PokerRes) String() string { return proto.CompactTextString(m) }
func (*PokerRes) ProtoMessage()    {}
func (*PokerRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_507d94a3e2f11051, []int{1}
}

func (m *PokerRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PokerRes.Unmarshal(m, b)
}
func (m *PokerRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PokerRes.Marshal(b, m, deterministic)
}
func (m *PokerRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerRes.Merge(m, src)
}
func (m *PokerRes) XXX_Size() int {
	return xxx_messageInfo_PokerRes.Size(m)
}
func (m *PokerRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerRes.DiscardUnknown(m)
}

var xxx_messageInfo_PokerRes proto.InternalMessageInfo

func (m *PokerRes) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *PokerRes) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PokerRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PokerRes) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return 0
}

func init() {
	proto.RegisterType((*PokerReq)(nil), "proto.PokerReq")
	proto.RegisterType((*PokerRes)(nil), "proto.PokerRes")
}

func init() { proto.RegisterFile("poker.proto", fileDescriptor_507d94a3e2f11051) }

var fileDescriptor_507d94a3e2f11051 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc8, 0xcf, 0x4e,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x06, 0x5c, 0x1c, 0x01,
	0x20, 0xd1, 0xa0, 0xd4, 0x42, 0x21, 0x01, 0x2e, 0xe6, 0xd0, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xd6, 0x20, 0x10, 0x53, 0x48, 0x88, 0x8b, 0xc5, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x49, 0x81,
	0x51, 0x83, 0x33, 0x08, 0xcc, 0x56, 0x8a, 0x83, 0xeb, 0x28, 0x16, 0x12, 0xe3, 0x62, 0x0b, 0x4a,
	0x2d, 0x2e, 0xcd, 0x29, 0x01, 0x6b, 0xe2, 0x0c, 0x82, 0xf2, 0x60, 0x26, 0x31, 0x61, 0x9a, 0xc4,
	0x8c, 0x30, 0x49, 0x48, 0x84, 0x8b, 0xb5, 0x24, 0x31, 0x29, 0x27, 0x55, 0x82, 0x05, 0xac, 0x0e,
	0xc2, 0x31, 0xb2, 0xe5, 0xe2, 0x06, 0x9b, 0x1f, 0x9c, 0x5a, 0x54, 0x96, 0x5a, 0x24, 0xa4, 0xc7,
	0xc5, 0xe1, 0x9e, 0x5a, 0x02, 0x16, 0x11, 0xe2, 0x87, 0xb8, 0x5d, 0x0f, 0xe6, 0x62, 0x29, 0x34,
	0x81, 0x62, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x88, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xba,
	0x15, 0x2d, 0xed, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PokerServerClient is the client API for PokerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokerServerClient interface {
	// Sends a greeting
	GetPoker(ctx context.Context, in *PokerReq, opts ...grpc.CallOption) (*PokerRes, error)
}

type pokerServerClient struct {
	cc *grpc.ClientConn
}

func NewPokerServerClient(cc *grpc.ClientConn) PokerServerClient {
	return &pokerServerClient{cc}
}

func (c *pokerServerClient) GetPoker(ctx context.Context, in *PokerReq, opts ...grpc.CallOption) (*PokerRes, error) {
	out := new(PokerRes)
	err := c.cc.Invoke(ctx, "/proto.PokerServer/GetPoker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokerServerServer is the server API for PokerServer service.
type PokerServerServer interface {
	// Sends a greeting
	GetPoker(context.Context, *PokerReq) (*PokerRes, error)
}

// UnimplementedPokerServerServer can be embedded to have forward compatible implementations.
type UnimplementedPokerServerServer struct {
}

func (*UnimplementedPokerServerServer) GetPoker(ctx context.Context, req *PokerReq) (*PokerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoker not implemented")
}

func RegisterPokerServerServer(s *grpc.Server, srv PokerServerServer) {
	s.RegisterService(&_PokerServer_serviceDesc, srv)
}

func _PokerServer_GetPoker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServerServer).GetPoker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PokerServer/GetPoker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServerServer).GetPoker(ctx, req.(*PokerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PokerServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PokerServer",
	HandlerType: (*PokerServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoker",
			Handler:    _PokerServer_GetPoker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poker.proto",
}
